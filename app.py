import streamlit as st
import pandas as pd
import io

st.set_page_config(page_title="An√°lise de Vendas com Insights Autom√°ticos", layout="centered")

st.title("üìä An√°lise de Vendas com Insights Autom√°ticos")

# Planilha modelo embutida como string
modelo_csv = """data da venda,produto,quantidade,valor unit√°rio,filial,total
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
,,,,,
"""

# Bot√£o de download da planilha modelo
st.download_button(
    label="üì• Baixar modelo de planilha",
    data=modelo_csv,
    file_name="modelo_planilha_vendas.csv",
    mime="text/csv",
)

# Upload de planilha
uploaded_file = st.file_uploader("Fa√ßa upload da sua planilha de vendas (CSV ou Excel):", type=["csv", "xlsx"])

if uploaded_file:
    try:
        if uploaded_file.name.endswith(".csv"):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)

        # Verifica se colunas obrigat√≥rias existem
        colunas_esperadas = ["data da venda", "produto", "quantidade", "valor unit√°rio", "filial", "total"]
        if not all(col in df.columns for col in colunas_esperadas):
            st.error("‚ùå A planilha deve conter as colunas: data da venda, produto, quantidade, valor unit√°rio, filial, total")
        else:
            st.success("‚úÖ Arquivo carregado com sucesso!")
            st.write("Visualiza√ß√£o dos dados:")
            st.dataframe(df)

            # Insights autom√°ticos
            st.subheader("üîç Insights autom√°ticos")
            try:
                df["data da venda"] = pd.to_datetime(df["data da venda"], errors="coerce")
                df = df.dropna(subset=["data da venda"])

                melhor_dia = df.groupby("data da venda")["total"].sum().idxmax()
                maior_venda = df.loc[df["total"].idxmax()]
                produto_mais_vendido = df.groupby("produto")["quantidade"].sum().idxmax()
                filial_top = df.groupby("filial")["total"].sum().idxmax()

                st.markdown(f"üìÖ **Dia com maior faturamento:** {melhor_dia.date()}")
                st.markdown(f"üí∞ **Maior venda:** {maior_venda['produto']} ‚Äì R$ {maior_venda['total']:.2f}")
                st.markdown(f"üî• **Produto mais vendido (em quantidade):** {produto_mais_vendido}")
                st.markdown(f"üè™ **Filial com maior faturamento:** {filial_top}")

            except Exception as e:
                st.warning("N√£o foi poss√≠vel gerar insights autom√°ticos.")
                st.exception(e)

    except Exception as e:
        st.error("Erro ao processar o arquivo.")
        st.exception(e)
